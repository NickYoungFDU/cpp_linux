/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "cpp_linux_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace azure { namespace storage { namespace cpp_linux {

int _kMatchInformationValues[] = {
  MatchInformation::OnlyOnServer,
  MatchInformation::OnlyInKeys,
  MatchInformation::DeletedOnClient,
  MatchInformation::Match
};
const char* _kMatchInformationNames[] = {
  "OnlyOnServer",
  "OnlyInKeys",
  "DeletedOnClient",
  "Match"
};
const std::map<int, const char*> _MatchInformation_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kMatchInformationValues, _kMatchInformationNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


ChunkInfo::~ChunkInfo() throw() {
}


void ChunkInfo::__set_OffSet(const int64_t val) {
  this->OffSet = val;
}

void ChunkInfo::__set_Length(const int32_t val) {
  this->Length = val;
}

void ChunkInfo::__set_Version(const int8_t val) {
  this->Version = val;
}

void ChunkInfo::__set_IsNullDataWritten(const bool val) {
  this->IsNullDataWritten = val;
}

void ChunkInfo::__set_IsCorrupted(const bool val) {
  this->IsCorrupted = val;
}

const char* ChunkInfo::ascii_fingerprint = "2D1F7C9D7EF060322343EC2AB2852351";
const uint8_t ChunkInfo::binary_fingerprint[16] = {0x2D,0x1F,0x7C,0x9D,0x7E,0xF0,0x60,0x32,0x23,0x43,0xEC,0x2A,0xB2,0x85,0x23,0x51};

uint32_t ChunkInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->OffSet);
          this->__isset.OffSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Length);
          this->__isset.Length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->Version);
          this->__isset.Version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsNullDataWritten);
          this->__isset.IsNullDataWritten = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCorrupted);
          this->__isset.IsCorrupted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChunkInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ChunkInfo");

  xfer += oprot->writeFieldBegin("OffSet", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->OffSet);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Length", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->Length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Version", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->Version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsNullDataWritten", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsNullDataWritten);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCorrupted", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsCorrupted);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ChunkInfo &a, ChunkInfo &b) {
  using ::std::swap;
  swap(a.OffSet, b.OffSet);
  swap(a.Length, b.Length);
  swap(a.Version, b.Version);
  swap(a.IsNullDataWritten, b.IsNullDataWritten);
  swap(a.IsCorrupted, b.IsCorrupted);
  swap(a.__isset, b.__isset);
}

ChunkInfo::ChunkInfo(const ChunkInfo& other0) {
  OffSet = other0.OffSet;
  Length = other0.Length;
  Version = other0.Version;
  IsNullDataWritten = other0.IsNullDataWritten;
  IsCorrupted = other0.IsCorrupted;
  __isset = other0.__isset;
}
ChunkInfo& ChunkInfo::operator=(const ChunkInfo& other1) {
  OffSet = other1.OffSet;
  Length = other1.Length;
  Version = other1.Version;
  IsNullDataWritten = other1.IsNullDataWritten;
  IsCorrupted = other1.IsCorrupted;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ChunkInfo& obj) {
  using apache::thrift::to_string;
  out << "ChunkInfo(";
  out << "OffSet=" << to_string(obj.OffSet);
  out << ", " << "Length=" << to_string(obj.Length);
  out << ", " << "Version=" << to_string(obj.Version);
  out << ", " << "IsNullDataWritten=" << to_string(obj.IsNullDataWritten);
  out << ", " << "IsCorrupted=" << to_string(obj.IsCorrupted);
  out << ")";
  return out;
}


StreamDataLayout::~StreamDataLayout() throw() {
}


void StreamDataLayout::__set_Chunks(const std::vector<ChunkInfo> & val) {
  this->Chunks = val;
}

void StreamDataLayout::__set_Length(const int64_t val) {
  this->Length = val;
}

const char* StreamDataLayout::ascii_fingerprint = "80E1C3D0F6200FD3585FF05B5D9711A9";
const uint8_t StreamDataLayout::binary_fingerprint[16] = {0x80,0xE1,0xC3,0xD0,0xF6,0x20,0x0F,0xD3,0x58,0x5F,0xF0,0x5B,0x5D,0x97,0x11,0xA9};

uint32_t StreamDataLayout::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Chunks.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->Chunks.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->Chunks[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Chunks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Length);
          this->__isset.Length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StreamDataLayout::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("StreamDataLayout");

  xfer += oprot->writeFieldBegin("Chunks", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Chunks.size()));
    std::vector<ChunkInfo> ::const_iterator _iter7;
    for (_iter7 = this->Chunks.begin(); _iter7 != this->Chunks.end(); ++_iter7)
    {
      xfer += (*_iter7).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Length", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->Length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(StreamDataLayout &a, StreamDataLayout &b) {
  using ::std::swap;
  swap(a.Chunks, b.Chunks);
  swap(a.Length, b.Length);
  swap(a.__isset, b.__isset);
}

StreamDataLayout::StreamDataLayout(const StreamDataLayout& other8) {
  Chunks = other8.Chunks;
  Length = other8.Length;
  __isset = other8.__isset;
}
StreamDataLayout& StreamDataLayout::operator=(const StreamDataLayout& other9) {
  Chunks = other9.Chunks;
  Length = other9.Length;
  __isset = other9.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const StreamDataLayout& obj) {
  using apache::thrift::to_string;
  out << "StreamDataLayout(";
  out << "Chunks=" << to_string(obj.Chunks);
  out << ", " << "Length=" << to_string(obj.Length);
  out << ")";
  return out;
}

}}} // namespace
