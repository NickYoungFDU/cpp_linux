/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FileShareService_H
#define FileShareService_H

#include <thrift/TDispatchProcessor.h>
#include "cpp_linux_types.h"

namespace azure { namespace storage { namespace cpp_linux {

class FileShareServiceIf {
 public:
  virtual ~FileShareServiceIf() {}
  virtual void MapFileShare(std::string& _return, const std::string& smbShareAddress, const std::string& username, const std::string& password, const std::string& mountPoint) = 0;
  virtual void UnmapFileContainer(const std::string& mountPoint) = 0;
};

class FileShareServiceIfFactory {
 public:
  typedef FileShareServiceIf Handler;

  virtual ~FileShareServiceIfFactory() {}

  virtual FileShareServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FileShareServiceIf* /* handler */) = 0;
};

class FileShareServiceIfSingletonFactory : virtual public FileShareServiceIfFactory {
 public:
  FileShareServiceIfSingletonFactory(const boost::shared_ptr<FileShareServiceIf>& iface) : iface_(iface) {}
  virtual ~FileShareServiceIfSingletonFactory() {}

  virtual FileShareServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FileShareServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<FileShareServiceIf> iface_;
};

class FileShareServiceNull : virtual public FileShareServiceIf {
 public:
  virtual ~FileShareServiceNull() {}
  void MapFileShare(std::string& /* _return */, const std::string& /* smbShareAddress */, const std::string& /* username */, const std::string& /* password */, const std::string& /* mountPoint */) {
    return;
  }
  void UnmapFileContainer(const std::string& /* mountPoint */) {
    return;
  }
};

typedef struct _FileShareService_MapFileShare_args__isset {
  _FileShareService_MapFileShare_args__isset() : smbShareAddress(false), username(false), password(false), mountPoint(false) {}
  bool smbShareAddress :1;
  bool username :1;
  bool password :1;
  bool mountPoint :1;
} _FileShareService_MapFileShare_args__isset;

class FileShareService_MapFileShare_args {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

  FileShareService_MapFileShare_args(const FileShareService_MapFileShare_args&);
  FileShareService_MapFileShare_args& operator=(const FileShareService_MapFileShare_args&);
  FileShareService_MapFileShare_args() : smbShareAddress(), username(), password(), mountPoint() {
  }

  virtual ~FileShareService_MapFileShare_args() throw();
  std::string smbShareAddress;
  std::string username;
  std::string password;
  std::string mountPoint;

  _FileShareService_MapFileShare_args__isset __isset;

  void __set_smbShareAddress(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  void __set_mountPoint(const std::string& val);

  bool operator == (const FileShareService_MapFileShare_args & rhs) const
  {
    if (!(smbShareAddress == rhs.smbShareAddress))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(mountPoint == rhs.mountPoint))
      return false;
    return true;
  }
  bool operator != (const FileShareService_MapFileShare_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileShareService_MapFileShare_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileShareService_MapFileShare_args& obj);
};


class FileShareService_MapFileShare_pargs {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};


  virtual ~FileShareService_MapFileShare_pargs() throw();
  const std::string* smbShareAddress;
  const std::string* username;
  const std::string* password;
  const std::string* mountPoint;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileShareService_MapFileShare_pargs& obj);
};

typedef struct _FileShareService_MapFileShare_result__isset {
  _FileShareService_MapFileShare_result__isset() : success(false) {}
  bool success :1;
} _FileShareService_MapFileShare_result__isset;

class FileShareService_MapFileShare_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  FileShareService_MapFileShare_result(const FileShareService_MapFileShare_result&);
  FileShareService_MapFileShare_result& operator=(const FileShareService_MapFileShare_result&);
  FileShareService_MapFileShare_result() : success() {
  }

  virtual ~FileShareService_MapFileShare_result() throw();
  std::string success;

  _FileShareService_MapFileShare_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const FileShareService_MapFileShare_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FileShareService_MapFileShare_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileShareService_MapFileShare_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileShareService_MapFileShare_result& obj);
};

typedef struct _FileShareService_MapFileShare_presult__isset {
  _FileShareService_MapFileShare_presult__isset() : success(false) {}
  bool success :1;
} _FileShareService_MapFileShare_presult__isset;

class FileShareService_MapFileShare_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~FileShareService_MapFileShare_presult() throw();
  std::string* success;

  _FileShareService_MapFileShare_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FileShareService_MapFileShare_presult& obj);
};

typedef struct _FileShareService_UnmapFileContainer_args__isset {
  _FileShareService_UnmapFileContainer_args__isset() : mountPoint(false) {}
  bool mountPoint :1;
} _FileShareService_UnmapFileContainer_args__isset;

class FileShareService_UnmapFileContainer_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  FileShareService_UnmapFileContainer_args(const FileShareService_UnmapFileContainer_args&);
  FileShareService_UnmapFileContainer_args& operator=(const FileShareService_UnmapFileContainer_args&);
  FileShareService_UnmapFileContainer_args() : mountPoint() {
  }

  virtual ~FileShareService_UnmapFileContainer_args() throw();
  std::string mountPoint;

  _FileShareService_UnmapFileContainer_args__isset __isset;

  void __set_mountPoint(const std::string& val);

  bool operator == (const FileShareService_UnmapFileContainer_args & rhs) const
  {
    if (!(mountPoint == rhs.mountPoint))
      return false;
    return true;
  }
  bool operator != (const FileShareService_UnmapFileContainer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileShareService_UnmapFileContainer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileShareService_UnmapFileContainer_args& obj);
};


class FileShareService_UnmapFileContainer_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~FileShareService_UnmapFileContainer_pargs() throw();
  const std::string* mountPoint;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileShareService_UnmapFileContainer_pargs& obj);
};


class FileShareService_UnmapFileContainer_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  FileShareService_UnmapFileContainer_result(const FileShareService_UnmapFileContainer_result&);
  FileShareService_UnmapFileContainer_result& operator=(const FileShareService_UnmapFileContainer_result&);
  FileShareService_UnmapFileContainer_result() {
  }

  virtual ~FileShareService_UnmapFileContainer_result() throw();

  bool operator == (const FileShareService_UnmapFileContainer_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FileShareService_UnmapFileContainer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileShareService_UnmapFileContainer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FileShareService_UnmapFileContainer_result& obj);
};


class FileShareService_UnmapFileContainer_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~FileShareService_UnmapFileContainer_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FileShareService_UnmapFileContainer_presult& obj);
};

class FileShareServiceClient : virtual public FileShareServiceIf {
 public:
  FileShareServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FileShareServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void MapFileShare(std::string& _return, const std::string& smbShareAddress, const std::string& username, const std::string& password, const std::string& mountPoint);
  void send_MapFileShare(const std::string& smbShareAddress, const std::string& username, const std::string& password, const std::string& mountPoint);
  void recv_MapFileShare(std::string& _return);
  void UnmapFileContainer(const std::string& mountPoint);
  void send_UnmapFileContainer(const std::string& mountPoint);
  void recv_UnmapFileContainer();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FileShareServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<FileShareServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FileShareServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_MapFileShare(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UnmapFileContainer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FileShareServiceProcessor(boost::shared_ptr<FileShareServiceIf> iface) :
    iface_(iface) {
    processMap_["MapFileShare"] = &FileShareServiceProcessor::process_MapFileShare;
    processMap_["UnmapFileContainer"] = &FileShareServiceProcessor::process_UnmapFileContainer;
  }

  virtual ~FileShareServiceProcessor() {}
};

class FileShareServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FileShareServiceProcessorFactory(const ::boost::shared_ptr< FileShareServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< FileShareServiceIfFactory > handlerFactory_;
};

class FileShareServiceMultiface : virtual public FileShareServiceIf {
 public:
  FileShareServiceMultiface(std::vector<boost::shared_ptr<FileShareServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FileShareServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<FileShareServiceIf> > ifaces_;
  FileShareServiceMultiface() {}
  void add(boost::shared_ptr<FileShareServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void MapFileShare(std::string& _return, const std::string& smbShareAddress, const std::string& username, const std::string& password, const std::string& mountPoint) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MapFileShare(_return, smbShareAddress, username, password, mountPoint);
    }
    ifaces_[i]->MapFileShare(_return, smbShareAddress, username, password, mountPoint);
    return;
  }

  void UnmapFileContainer(const std::string& mountPoint) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UnmapFileContainer(mountPoint);
    }
    ifaces_[i]->UnmapFileContainer(mountPoint);
  }

};

}}} // namespace

#endif
